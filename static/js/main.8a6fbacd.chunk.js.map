{"version":3,"sources":["components/TimerConfig.jsx","constants/constants.js","components/Display.jsx","utils/TimeUtils.js","utils/AudioUtils.js","utils/DOMUtils.js","audios/beep.mp3","App.jsx","index.jsx"],"names":["TimerConfig","id","onChange","label","value","className","onClick","title","memo","ACTIVE","NOT_STARTED","SESSION_LABEL","BREAK_LABEL","formatTime","num","Display","minutes","seconds","canUpdateTime","duration","status","isTimeWithinRange","resetAudio","audio","paused","pause","currentTime","addBodyClass","document","body","classList","add","removeBodyClass","remove","changeToWorkMode","App","useState","sessionTime","setSessionTime","breakTime","setBreakTime","currentTimerLabel","setCurrentTimerLabel","currentTimer","setCurrentTimer","time","setTime","setStatus","audioRef","useRef","useEffect","current","play","int","setInterval","t","clearInterval","offset","newTime","src","beep","ref","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8a6fbacd.chunk.js","sourcesContent":["import { memo } from 'react';\n\nimport '../scss/timer.scss';\n\nconst TimerConfig = ({ id, onChange, label, value }) => {\n  return (\n    <div className='timer'>\n      <div className='timer-label' id={`${id}-label`}>\n        {label} Length\n      </div>\n      <div className='timer-controls'>\n        <button\n          className='btn-icon material-icons-round'\n          id={`${id}-decrement`}\n          onClick={() => onChange(-1)}\n          title='Decrement'\n          aria-label='Decrement by 1 minute'\n        >\n          remove\n        </button>\n        <span className='timer-time' id={`${id}-length`}>\n          {value}\n        </span>\n        <button\n          className='btn-icon material-icons-round'\n          id={`${id}-increment`}\n          onClick={() => onChange(1)}\n          aria-label='Increment by 1 minute'\n          title='Increment'\n        >\n          add\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TimerConfig);\n","export const INIT_SESSION_TIME = 25;\nexport const INIT_BREAK_TIME = 5;\nexport const PAUSED = 'PAUSED';\nexport const ACTIVE = 'ACTIVE';\nexport const NOT_STARTED = 'NOT_STARTED';\nexport const SESSION_LABEL = 'Session';\nexport const BREAK_LABEL = 'Break';\n","import '../scss/display.scss';\nimport { memo } from 'react';\n\nconst formatTime = num => {\n  return num > 9 ? num : '0' + num;\n};\n\nconst Display = ({ label, minutes, seconds }) => {\n  return (\n    <div className='display'>\n      <h2 className='display-label' id='timer-label'>\n        {label}\n      </h2>\n      <span className='display-time-left' id='time-left'>\n        {formatTime(minutes)}:{formatTime(seconds)}\n      </span>\n    </div>\n  );\n};\n\nexport default memo(Display);\n","import { NOT_STARTED } from '../constants/constants';\n\nexport const isTimeWithinRange = duration => {\n  return duration > 0 && duration <= 60;\n};\n\nexport const canUpdateTime = (duration, status) => {\n  return isTimeWithinRange(duration) && status === NOT_STARTED;\n};\n","export const resetAudio = audio => {\n  if (!audio.paused) {\n    audio.pause();\n  }\n  audio.currentTime = 0;\n};\n\nexport const resetAudioAndPlay = audio => {\n  resetAudio(audio);\n  audio.play();\n};\n","export const addBodyClass = className => {\n  document.body.classList.add(className);\n};\nexport const removeBodyClass = className => {\n  document.body.classList.remove(className);\n};\n","export default __webpack_public_path__ + \"static/media/beep.3e8c5594.mp3\";","import React, { useEffect, useRef, useState } from 'react';\nimport TimerConfig from './components/TimerConfig';\nimport {\n  ACTIVE,\n  BREAK_LABEL,\n  INIT_BREAK_TIME,\n  INIT_SESSION_TIME,\n  NOT_STARTED,\n  PAUSED,\n  SESSION_LABEL,\n} from './constants/constants';\nimport Display from './components/Display';\nimport { canUpdateTime } from './utils/TimeUtils';\nimport { resetAudio, resetAudioAndPlay } from './utils/AudioUtils';\nimport { addBodyClass, removeBodyClass } from './utils/DOMUtils';\nimport beep from './audios/beep.mp3';\n\nconst changeToWorkMode = () => {\n  addBodyClass('work');\n  removeBodyClass('break');\n};\n\nconst changeToBreakMode = () => {\n  addBodyClass('break');\n  removeBodyClass('work');\n};\n\nconst resetMode = () => {\n  removeBodyClass('work');\n  removeBodyClass('break');\n};\n\nconst App = () => {\n  const [sessionTime, setSessionTime] = useState(INIT_SESSION_TIME);\n  const [breakTime, setBreakTime] = useState(INIT_BREAK_TIME);\n  const [currentTimerLabel, setCurrentTimerLabel] = useState(SESSION_LABEL);\n  const [currentTimer, setCurrentTimer] = useState();\n  const [time, setTime] = useState({ minutes: INIT_SESSION_TIME, seconds: 0 });\n  const [status, setStatus] = useState(NOT_STARTED);\n  const audioRef = useRef(null);\n\n  useEffect(() => {\n    if (status !== ACTIVE) {\n      return;\n    }\n    if (time.seconds === 0) {\n      if (time.minutes <= 0) {\n        if (currentTimerLabel === SESSION_LABEL) {\n          setCurrentTimerLabel(BREAK_LABEL);\n          setTime({ minutes: breakTime, seconds: 0 });\n          changeToBreakMode();\n        } else {\n          setCurrentTimerLabel(SESSION_LABEL);\n          setTime({ minutes: sessionTime, seconds: 0 });\n          changeToWorkMode();\n        }\n        resetAudioAndPlay(audioRef.current);\n      }\n    }\n  }, [status, breakTime, currentTimerLabel, sessionTime, time.seconds, time.minutes]);\n\n  useEffect(() => {\n    if (status !== ACTIVE) {\n      return;\n    }\n    const int = setInterval(() => {\n      if (time.seconds === 0) {\n        setTime(t => ({ minutes: t.minutes - 1, seconds: 59 }));\n      } else {\n        setTime(t => ({ ...t, seconds: t.seconds - 1 }));\n      }\n    }, 1000);\n\n    setCurrentTimer(int);\n\n    return () => clearInterval(int);\n  }, [status, time.seconds, time.minutes]);\n\n  const changeSessionDuration = offset => {\n    const newTime = sessionTime + offset;\n    if (!canUpdateTime(newTime, status)) {\n      return;\n    }\n    setSessionTime(newTime);\n    setTime({ seconds: 0, minutes: newTime });\n  };\n\n  const changeBreakDuration = offset => {\n    const newTime = breakTime + offset;\n    if (!canUpdateTime(newTime, status)) {\n      return;\n    }\n    setBreakTime(newTime);\n  };\n\n  const start = () => {\n    setStatus(ACTIVE);\n    changeToWorkMode();\n  };\n\n  const pause = () => {\n    setStatus(PAUSED);\n    clearInterval(currentTimer);\n    resetAudio(audioRef.current);\n  };\n\n  const reset = () => {\n    setSessionTime(INIT_SESSION_TIME);\n    setBreakTime(INIT_BREAK_TIME);\n    setStatus(NOT_STARTED);\n    setCurrentTimerLabel(SESSION_LABEL);\n    setTime({ minutes: INIT_SESSION_TIME, seconds: 0 });\n    clearInterval(currentTimer);\n    resetAudio(audioRef.current);\n    resetMode();\n  };\n\n  const toggleStartPause = () => {\n    status === ACTIVE ? pause() : start();\n  };\n\n  return (\n    <>\n      <h1 className='title'>25 + 5 Clock</h1>\n      <main className='main'>\n        <div className='configurations'>\n          <TimerConfig id='break' label={BREAK_LABEL} value={breakTime} onChange={changeBreakDuration} />\n          <TimerConfig id='session' label={SESSION_LABEL} value={sessionTime} onChange={changeSessionDuration} />\n        </div>\n        <Display label={currentTimerLabel} minutes={time.minutes} seconds={time.seconds} />\n        <div className='actions'>\n          <button\n            onClick={toggleStartPause}\n            className='btn-icon xl material-icons-round'\n            id='start_stop'\n            aria-label={(status === 'ACTIVE' ? 'Pause' : status === 'NOT_STARTED' ? 'Start' : 'Resume') + ' Timer'}\n            title={(status === 'ACTIVE' ? 'Pause' : status === 'NOT_STARTED' ? 'Start' : 'Resume') + ' Timer'}\n          >\n            {status === 'ACTIVE' ? 'pause' : 'play_arrow'}\n          </button>\n          <button\n            className='btn-icon xl material-icons-round'\n            onClick={reset}\n            id='reset'\n            aria-label='Reset Timer'\n            title='Reset Timer'\n          >\n            refresh\n          </button>\n        </div>\n        <audio id='beep' src={beep} ref={audioRef} />\n      </main>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}